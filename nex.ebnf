# version: 1.0.0 "linda"

program ::= (main_entry_point statements* | statements* main_entry_point) "\0"

# Terminal Definitions

main_entry_point ::= ':' 'fn' 'main' '=>' parameters '{' statements '}'

letter ::= 'a' ... 'z' | 'A' ... 'Z'
digit ::= '0' | '1' ... '9'
exponent ::= ('e' | 'E') [('+' | '-')] digit+
hexdigit ::= digit | 'a' .. 'f'

identifier ::= (letter | '_') (letter | digit | '_')*

# Literals

literal ::= (integer_literal | float_literal | string_literal | char_literal | bool_literal)

integer_literal ::= ['-'] digit+

float_literal ::= digit+ '.' digit+ [exponent] [float_suffix]
float_suffix ::= 'f' | 'F'

string_literal ::= '"' (letter | escape_sequence)* '"'
char_literal ::= "'" (character | escape_sequence) "'"

escape_sequence ::= '\\' ( '"' | '\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | unicode_escape)
unicode_escape ::= '\\u' hex hex hex hex

bool_literal ::= 'true' | 'false'

array_literal ::= '{' [expression (',' expression)*] '}'

# Memory Specifiers

storage_specifier ::= 'var' | 'const' | 'mut'
access_specifier ::= 'pub' | 'priv' | 'glob'
data_type_specifier ::= prim_data_type_specifier | comp_data_type_specifier

prim_data_type_specifier ::= (
    ['s_short' | 'short' | 'long' | 'l_long'] 'int'
    | ['s_short' | 'short' | 'long' | 'l_long'] 'uint'
    | ['short'] 'float'
) | 'char' | 'str' | 'bool' | 'size'

comp_data_type_specifier ::= prim_data_type_specifier '[' [expression] ']'

# Statements and Expressions

statements ::= statement (';' statement)*
statement ::= (expression | import_declaration | variable_declaration | function_declaration
    | struct_declaration | class_declaration | enum_declaration | conditional_statement 
    | for_statement | switch_statement | try_statement | while_statement 
    | function_call_statement | loop_control_statement | return_statement)

    loop_control_statement ::= ('break' | 'continue') ';'
    return_statement ::= 'return' expression ';'

expression ::= comparison_expression
    comparison_expression ::= bitwise_expression
    | comparison_expression ( '==' | '>' | '<' | '>=' | '<=' | '!=' | '!' ) bitwise_expression

    bitwise_expression ::= addition_expression
    | bitwise_expression ( '&' | '|' | '^' | '~' | '<<' | '>>' ) addition_expression

    addition_expression ::= multiplication_expression
    | addition_expression ( '+' | '-' ) multiplication_expression

    multiplication_expression ::= term
    | multiplication_expression ( '*' | '/' | '%' ) term

    term ::= factor
    | term '^' factor

    factor ::= primary_expression
    | ( '++' | '--' ) primary_expression

    primary_expression ::= '(' expression ')'
    | function_call
    | identifier
    | literal

# Declarations

parameters ::= '(' [parameter (',' parameter)*] ')'
parameter ::= [data_type_specifier] ':' identifier

import_declaration ::= '@import' (import_module_name | import_module_names)
    | '@import' (import_module_name | import_module_names) 'from' (import_module_name)
    | '@import' (import_module_names | import_module_name) 'from' (import_module_name) 'as' identifier
    
    import_module_names ::= import_module_name (',' import_module_name)*
    import_module_name ::= identifier ('.' identifier)*

variable_declaration ::= storage_specifier [access_specifier] [data_type_specifier] ':' identifier ';' 
    | storage_specifier [access_specifier] [data_type_specifier] ':' identifier '=' expression

function_declaration ::= [storage_specifier] [access_specifier] [data_type_specifier] [':'] 'fn' identifier '=>' parameters '{' statements '}'

    function_call_statement ::= identifier '(' parameters ')' [';']

struct_declaration ::= access_specifier ':' 'struct' identifier ';'
    | access_specifier ':' 'struct' identifier '{' struct_member_declaration (struct_member_declaration)* '}'

    struct_member_declaration ::=  storage_specifier [data_type_specifier] ':' identifier ';'

class_declaration ::=  access_specifier ':' 'class' identifier ['<' letter '>'] ['ext' identifier] '{' (class_spec_function_declaration | class_function_declaration | class_variable_declaration)* '}'

    class_variable_declaration ::= storage_specifier access_specifier [data_type_specifier] ':' identifier ';' 
        | storage_specifier access_specifier [data_type_specifier] ':' identifier '=' expression ';'
    
    class_function_declaration ::= access_specifier [storage_specifier] [data_type_specifier] ':' 'fn' identifier '=>' parameters ';'
        | access_specifier [storage_specifier] [data_type_specifier] ':' 'fn' identifier '=>' parameters '{' statements '}'
    
    class_spec_function_declaration ::= identifier ':' 'fn' ('__init__' | '__free__') '=>' parameters ';'
        | identifier ':' 'fn' ('__init__' | '__free__') '=>' parameters '{' statements '}'

enum_declaration ::= access_specifier ':' 'enum' identifier ';'
    | access_specifier ':' 'enum' identifier '{' identifier (',' identifier)* '}'

# Control Statements

conditional_statement ::= 'if' '(' expression ')' '{' statements '}'
    | 'if' '(' expression ')' '{' statements '}' 'else' '{' statements '}'
    | 'if' '(' expression ')' '{' statements '}' (
        'elif' '(' expression ')' '{' statements '}'
        | 'elif' '(' expression ')' '{' statements '}' 'else' '{' statements '}'
    )

for_statement ::= 'for' '(' (identifier | variable_declaration) (
        (';' comparison_expression ';' expression)
        | (':' (variable_declaration | identifier))
        | ('::' (variable_declaration | identifier))
    ) ')' '{' statements '}'

switch_statement ::= 'switch' '(' expression ')' '{' (case_clause | (case_clause)*) '}'
    case_clause ::= 'case' expression ':' statements
    | 'default' ':' statements

try_statement ::= 'try' '{' statements '}' (except_clause | (except_clause)*) ['finally' '{' statements '}']
    except_clause ::= 'except' identifier '{' statements '}'

while_statement ::= 'while' '(' expression ')' '{' statements '}'